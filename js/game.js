(function(){
    loadMenu();
    var cnv = document.querySelector("canvas");
    var ctx = cnv.getContext("2d");

    var WIDTH = cnv.width;
    var HEIGHT = cnv.height;
    
    var LEFT = 37, UP = 38, RIGHT = 39, DOWN = 40;
    var ENTER = 13;
    var SPACE = 32;
    var mvLeft = false;
    var mvUp = false;
    var mvRight = false;
    var mvDown = false; 
    var enterPr = false;
    var spacePr = false;
    var gameStart = 0; 
    var menuStart = 0; 
    var loreStart = 0;
    var loreFinish = 0;
    var loreSkip = 0;
    var mazeStart = 0;
    var gameOver = 0;
    var lvlSong = new Audio("level.mp3");
    var lvlSongB = new Audio("levelSong.mp3");
    var ending = new Audio("ending.mp3");
    var startSong = new Audio("start_screen.mp3");

    container = document.getElementById("game");

     //Imagens
     //Parede
     var imgWall = new Image();
     imgWall.src="img/wall.png";
     imgWall.addEventListener("load", function(){
        requestAnimationFrame(loop, cnv);
     },false);
     //Jogador
     var imgPlayer = new Image();
     imgPlayer.src="img/character.png";
     imgPlayer.addEventListener("load", function(){
        requestAnimationFrame(loop, cnv);
     },false);
     //Chão
     var imgFloor = new Image();
     imgFloor.src="img/floor.png";
     imgFloor.addEventListener("load", function(){
        requestAnimationFrame(loop, cnv);
     },false);

     //Saída
     var imgExit = new Image();
     imgExit.src="img/exit.png";
     imgExit.addEventListener("load", function(){
        requestAnimationFrame(loop, cnv);
     },false);
 
    //Saída
    var exits = [];
    
    //Paredes
    var walls = []; 

    //Buracos
    var holes = []

    var tileSize = 64;
    //Jogador
    var player = {
        x: tileSize + 2,
        y: tileSize + 2,
        width: 30,
        height: 32,
        //Velocidade de Movimento
        speed: 2,
        srcX: 0,
        srcY: 0,
        countAnim: 0
    }; 

    var maze = [
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
               [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
               ];
               selectMaze();

               function selectMaze(){
                var phase = Math.floor(Math.random() * 20) + 1;
                console.log("Fase selecionada: " + phase);
                switch(phase){
                 case 1:
                     maze = [
                     [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                     [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                     [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1],
                     [1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1],
                     [1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1],
                     [1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,0,1],
                     [1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1],
                     [1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1],
                     [1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1],
                     [1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1],
                     [1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1],
                     [1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1],
                     [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
                     [1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1],
                     [1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1],
                     [1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1],
                     [1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1],
                     [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1],                     
                     [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                     ];
                     break;
                  case 2:
                    maze = [
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                    [1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1],
                    [1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1],
                    [1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1],
                    [1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1],
                    [1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1],
                    [1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1],
                    [1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1],
                    [1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1],
                    [1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1],
                    [1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1],
                    [1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1],
                    [1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1],
                    [1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1],
                    [1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1],
                    [1,3,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                    ];
                    break;
                    case 3:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1],
                        [1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1],
                        [1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1],
                        [1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1],
                        [1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1],
                        [1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1],
                        [1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1],
                        [1,0,0,0,1,3,1,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 4:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1],
                        [1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1],
                        [1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,0,0,1,3,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],                       
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 5:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1],
                        [1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1],
                        [1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1],
                        [1,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1],
                        [1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,0,0,0,0,0,3,1,0,1,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 6:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1],
                        [1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1],
                        [1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1],
                        [1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1],
                        [1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1],
                        [1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1],
                        [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1],
                        [1,3,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 7:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1],
                        [1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1],
                        [1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1],
                        [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1],
                        [1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1],
                        [1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                        [1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1],
                        [1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 8:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1],
                        [1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1],
                        [1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1],
                        [1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1],
                        [1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1],
                        [1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1],
                        [1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1],
                        [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1],
                        [1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 9:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1],
                        [1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1],
                        [1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1],
                        [1,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1],
                        [1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1],
                        [1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1],
                        [1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1],
                        [1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,0,3,1,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 10:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1],
                        [1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1],
                        [1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1],
                        [1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1],
                        [1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1],
                        [1,0,0,0,0,0,0,0,0,3,1,0,0,0,0,0,1],
                        [1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1],
                        [1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1],
                        [1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1],
                        [1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 11:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1],
                        [1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1],
                        [1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1],
                        [1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1],
                        [1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 12:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1],
                        [1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1],
                        [1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1],
                        [1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1],
                        [1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1],
                        [1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,3,1],
                        [1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1],
                        [1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1],
                        [1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 13:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1],
                        [1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1],
                        [1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1],
                        [1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1],
                        [1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1],
                        [1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1],
                        [1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1],
                        [1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1],
                        [1,3,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 14:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1],
                        [1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1],
                        [1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1],
                        [1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1],
                        [1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1],
                        [1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1],
                        [1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1],
                        [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1],
                        [1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1],
                        [1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1],
                        [1,3,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 15:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1],
                        [1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1],
                        [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1],
                        [1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1],
                        [1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1],
                        [1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1],
                        [1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1],
                        [1,0,0,0,1,0,0,0,1,3,1,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 16:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1],
                        [1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1],
                        [1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],
                        [1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1],
                        [1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1],
                        [1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1],
                        [1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1],
                        [1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 17:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1],
                        [1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1],
                        [1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1],
                        [1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1],
                        [1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1],
                        [1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1],
                        [1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1],
                        [1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1],
                        [1,3,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 18:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1],
                        [1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1],
                        [1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1],
                        [1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1],
                        [1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1],
                        [1,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1],
                        [1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 19:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1],
                        [1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1],
                        [1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1],
                        [1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1],
                        [1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1],
                        [1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,1],
                        [1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1],
                        [1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                        case 20:
                        maze = [
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1],
                        [1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1],
                        [1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1],
                        [1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1],
                        [1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1],
                        [1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1],
                        [1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1],
                        [1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1],
                        [1,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1],
                        [1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1],
                        [1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1],
                        [1,3,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1],
                        [1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1],
                        [1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
                        ];
                        break;
                }
                mazeStart = 1;
             }

             var T_WIDTH = maze[0].length * tileSize;
             var T_HEIGHT = maze.length * tileSize;
         
            createBlocks();
            function createBlocks(){

               for(var row in maze){
               for (var col in maze[row]){
                var tile = maze[row][col];
                if(tile === 1){
                  var wall = {
                    x: tileSize * col,
                    y: tileSize * row,
                    width: tileSize,
                    height: tileSize
                  };
                  walls.push(wall);
                  console.log("Paredes criadas com sucesso!");
                }
            }
        }
            for (var row in maze){
            for (var col in maze[row]){
                var tile = maze[row][col];
                if(tile === 2){
                  var hole = {
                    x: tileSize * col,
                    y: tileSize * row,
                    width: tileSize,
                    height: tileSize
                  };
                  holes.push(hole);
                }
            }
        }

        for(var row in maze){
            for (var col in maze[row]){
             var tile = maze[row][col];
             if(tile === 3){
               var exit = {
                 x: tileSize * col,
                 y: tileSize * row,
                 width: tileSize,
                 height: tileSize
               };
               exits.push(exit);
               console.log("Saída criada com sucesso!");
             }
         }
     }
    }
        
        //Definir câmera
        var cam = {
            x: 0,
            y: 0,
            width: WIDTH,
            height: HEIGHT,
            innerLeftBoundary: function(){
                return this.x + (this.width * 0.25);
            },
            innerRightBoundary: function(){
                return this.x + (this.width * 0.75);
            },
            innerUpBoundary: function(){
                return this.y + (this.height * 0.25);
            },
            innerDownBoundary: function(){
                return this.y + (this.height * 0.75);
            }
        };

               function blockRectangle(objA, objB){
                var distX = (objA.x + (objA.width/2)) - (objB.x + (objB.width/2));
                var distY = (objA.y + (objA.height/2)) - (objB.y + (objB.height/2));

                var sumWidth = (objA.width + objB.width)/2;
                var sumHeight = (objA.height + objB.height)/2;

                //Verifica colisão
                if(Math.abs(distX) < sumWidth && Math.abs(distY) < sumHeight){
                    var overlapX = sumWidth - Math.abs(distX);
                    var overlapY = sumHeight - Math.abs(distY);

                    //Objeto já colidiu pelo eixo X
                    if(overlapX > overlapY){
                        objA.y = distY > 0 ? objA.y + overlapY : objA.y - overlapY;
                    }
                    else{
                        objA.x = distX > 0 ? objA.x + overlapX : objA.x - overlapX;
                    }
                    }
                }

                function gameEnd(objA, objB){
                    var distX = (objA.x + (objA.width/2)) - (objB.x + (objB.width/2));
                    var distY = (objA.y + (objA.height/2)) - (objB.y + (objB.height/2));
    
                    var sumWidth = (objA.width + objB.width)/2;
                    var sumHeight = (objA.height + objB.height)/2;
    
                    //Verifica colisão
                    if(Math.abs(distX) < sumWidth && Math.abs(distY) < sumHeight){
                        if(gameOver == 1){
                            return;
                        }
                        var overlapX = sumWidth - Math.abs(distX);
                        var overlapY = sumHeight - Math.abs(distY);
    
                        //Colidiu pelo eixo X
                        if(overlapX > overlapY){
                            if(gameOver == 1){
                                return;
                            }
                            objA.y = distY > 0 ? objA.y + overlapY : objA.y - overlapY;
                            gameCredits();
                        }
                        //Colidiu pelo eixo y
                        else{
                            if(gameOver == 1){
                                return;
                            }
                            objA.x = distX > 0 ? objA.x + overlapX : objA.x - overlapX;
                            gameCredits();
                        }
                        }
                    }
               

               window.addEventListener("keydown", keydownHandler, false);
               window.addEventListener("keyup", keyupHandler, false);

               function loadLore(){
                loreStart = 1;
                document.getElementById('menu').innerHTML = '';
                function sleep(ms) {
                    return new Promise(
                      resolve => setTimeout(resolve, ms)
                    );
                  }
                    console.log("Lore Chamada");
                    var space = new Image();
                    space.src = "img/press-space.png"
                    var start = new Image();
                    start.src = "img/press-enter.png"
                    var fadinA1 = new Image();
                    fadinA1.src = "img/lore1(25).png";
                    var fadinA2 = new Image();
                    fadinA2.src = "img/lore1(50).png";
                    var fadinA3 = new Image();
                    fadinA3.src = "img/lore1(75).png";
                    var loreA = new Image();
                    loreA.src = "img/lore1.png"
                    var fadinB1 = new Image();
                    fadinB1.src = "img/lore2(25).png";
                    var fadinB2 = new Image();
                    fadinB2.src = "img/lore2(50).png";
                    var fadinB3 = new Image();
                    fadinB3.src = "img/lore2(75).png";
                    var loreB = new Image();
                    loreB.src = "img/lore2.png"
                    var fadinC1 = new Image();
                    fadinC1.src = "img/lore3(25).png";
                    var fadinC2 = new Image();
                    fadinC2.src = "img/lore3(50).png";
                    var fadinC3 = new Image();
                    fadinC3.src = "img/lore3(75).png";
                    var loreC = new Image();
                    loreC.src = "img/lore3.png"
                    var fadinD1 = new Image();
                    fadinD1.src = "img/lore4(25).png";
                    var fadinD2 = new Image();
                    fadinD2.src = "img/lore4(50).png";
                    var fadinD3 = new Image();
                    fadinD3.src = "img/lore4(75).png";
                    var loreD = new Image();
                    loreD.src = "img/lore4.png"
                    startSong.play();
                    startSong.loop = true;
                    console.log("Repetindo música...", startSong.loop);
                    document.getElementById("space").appendChild(space);
                   console.log("Lore pulada: " + loreSkip);
             
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById("loreA").appendChild(fadinA1);
                        
                    }, "2000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreA').innerHTML = '';
                        document.getElementById("loreA").appendChild(fadinA2);
                    }, "3000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreA').innerHTML = '';
                        document.getElementById("loreA").appendChild(fadinA3);
                    }, "4000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreA').innerHTML = '';
                        document.getElementById("loreA").appendChild(loreA);
                    }, "5000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById("loreB").appendChild(fadinB1);
                    }, "6000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreB').innerHTML = '';
                        document.getElementById("loreB").appendChild(fadinB2);
                    }, "7000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreB').innerHTML = '';
                        document.getElementById("loreB").appendChild(fadinB3);
                    }, "8000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreB').innerHTML = '';
                        document.getElementById("loreB").appendChild(loreB);
                    }, "9000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById("loreC").appendChild(fadinC1);
                    }, "10000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreC').innerHTML = '';
                        document.getElementById("loreC").appendChild(fadinC2);
                    }, "11000");
        
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreC').innerHTML = '';
                        document.getElementById("loreC").appendChild(fadinC3);
                    }, "12000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreC').innerHTML = '';
                        document.getElementById("loreC").appendChild(loreC);
                    }, "13000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById("loreD").appendChild(fadinD1);
                    }, "14000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreD').innerHTML = '';
                        document.getElementById("loreD").appendChild(fadinD2);
                    }, "15000");
            
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreD').innerHTML = '';
                        document.getElementById("loreD").appendChild(fadinD3);
                    }, "16000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById('loreD').innerHTML = '';
                        document.getElementById("loreD").appendChild(loreD);
                    }, "17000");
                    setTimeout(() => {
                        if(loreSkip == 1){
                            return; 
                           }
                        document.getElementById("start").appendChild(start);
                    }, "18000");
                    setTimeout(() => {
                                        
                    if(loreSkip == 1){
                        return; 
                       }
                    loreFinish = 1;      
                    }, "20000");
                
                    
               }

               function loadMenu(){
                function sleep(ms) {
                return new Promise(
                  resolve => setTimeout(resolve, ms)
                );
              }
                console.log("Menu chamado");
              
                  var loading = new Image();
                  loading.src = "img/loading.gif"
                  document.getElementById("menu").appendChild(loading);
                  setTimeout(() => {
                    document.getElementById("menu").innerHTML= "";
                var logo1 = new Image();
                logo1.src = "img/logo-game(1).png";
                var logo2 = new Image();
                logo2.src = "img/logo-game(2).png";
                var logo3 = new Image();
                logo3.src = "img/logo-game(3).png";
                var logo4 = new Image();
                logo4.src = "img/logo-game(4).png";
                var logo5 = new Image();
                logo5.src = "img/logo-game(5).png";
                var logo6 = new Image();
                logo6.src = "img/logo-game(6).png";
                var logo = new Image();
                logo.src = "img/logo-game.png";
                setTimeout(() => {
                    document.getElementById("menu").appendChild(logo1);      
                    }, "100");
                setTimeout(() => {
                    document.getElementById('menu').innerHTML = '';
                    document.getElementById("menu").appendChild(logo2);      
                    }, "200");
                setTimeout(() => {
                    document.getElementById('menu').innerHTML = '';
                    document.getElementById("menu").appendChild(logo3);      
                    }, "300");
                setTimeout(() => {
                    document.getElementById('menu').innerHTML = '';
                    document.getElementById("menu").appendChild(logo4);      
                    }, "400");
                setTimeout(() => {
                    document.getElementById('menu').innerHTML = '';
                    document.getElementById("menu").appendChild(logo5);      
                    }, "500");
                setTimeout(() => {
                    document.getElementById('menu').innerHTML = '';
                    document.getElementById("menu").appendChild(logo6);      
                    }, "600");
                setTimeout(() => {
                    document.getElementById('menu').innerHTML = '';
                    document.getElementById("menu").appendChild(logo);      
                    menuStart = 1;
                    }, "700");
                        
                console.log("Delayed for 7 second.");
              console.log(menuStart);
              }, "7000");
              }

    function keydownHandler(e){
       var key = e.keyCode; 
       console.log(key);
       switch(key){ 
        case LEFT:
            if(gameOver == 0 && gameStart == 1){
            mvLeft = true;
            }
            break;
        case RIGHT:
            if(gameOver == 0 && gameStart == 1){
            mvRight = true;
            }
            break;
        case DOWN:
            if(gameOver == 0 && gameStart == 1){
            mvDown = true;
            }
            break;
        case UP:
            if(gameOver == 0 && gameStart == 1){
            mvUp = true;
            }
            break;
        case ENTER:
            if(gameStart == 1 && gameOver == 0){
                break;
            }
            enterPr = true;
            if(menuStart == 1 && loreFinish == 1){
            gameStart = 1;
            }
            break;
        case SPACE:
                if(loreStart == 0 || loreSkip == 1){
                    if(loreStart == 0){
                    console.log("Lore não iniciada!");
                    }
                    if(loreSkip == 1){
                    console.log("Lore pulada!");
                    }
                    break;
                }
                spacePr = true;
                if(menuStart == 1){
                console.log("Posição do personagem:" + player.x, player.y);
                gameStart = 1;
                }
                break;
       }
    }

    function keyupHandler(e){
        var key = e.keyCode; 
        switch(key){ 
         case LEFT:
             mvLeft = false;
             break;
         case RIGHT:
             mvRight = false;
             break;
         case DOWN:
             mvDown = false;
             break;
         case UP:
             mvUp = false;
             break;
         case ENTER:
            enterPr = false;
            break;
         case SPACE:
                spacePr = false;
            break;
        }
     }

    function update(){
        //Tela de Lore
       if(spacePr && menuStart > 0 && loreStart > 0){
        loreSkip = 1;
        console.log("Entrou!");
        document.getElementById('start').innerHTML = '';
        document.getElementById('space').innerHTML = '';
        document.getElementById('loreA').innerHTML = '';
        document.getElementById('loreB').innerHTML = '';
        document.getElementById('loreC').innerHTML = '';
        document.getElementById('loreD').innerHTML = '';
        let element = document.getElementById('game');
        element.removeAttribute("hidden");
        //Para Música de Menu
        startSong.pause();
        startSong.currentTime = 0;
        lvlSong.play();
        lvlSongB.play();
        lvlSong.loop = true; 
        lvlSongB.loop = true; 
        console.log("Repetindo Música: ", lvlSong.loop);
        loreFinish = 1;
       }
       //Tela de Início 
       if(enterPr && menuStart > 0){
        if(loreStart == 0){
            loadLore();
        }
        else if(loreFinish == 1 && gameOver == 0){ 
        console.log("Entrou!");
        document.getElementById('start').innerHTML = '';
        document.getElementById('space').innerHTML = '';
        document.getElementById('loreA').innerHTML = '';
        document.getElementById('loreB').innerHTML = '';
        document.getElementById('loreC').innerHTML = '';
        document.getElementById('loreD').innerHTML = '';
        let element = document.getElementById('game');
        element.removeAttribute("hidden");
        //Para Música de Menu
        startSong.pause();
        startSong.currentTime = 0;
        lvlSong.play();
        lvlSongB.play();
        lvlSong.loop = true; 
        lvlSongB.loop = true; 
        console.log("Repetindo Música: ", lvlSong.loop);
        }
       }
       if(enterPr && gameOver == 1){
        gameOver = 0;
        console.log("Reiniciando jogo...");
        document.getElementById('gameEnd').innerHTML = '';
        document.getElementById('messageEnd').innerHTML = '';
        document.getElementById('continue').innerHTML = '';
        player.x = tileSize + 2;
        player.y = tileSize + 2;
        console.log("Buracos:" + holes);
        console.log("Paredes:" + walls);
        console.log("Saídas:" + exits);
        gameOver = 0;
        setTimeout(() => {
            ending.pause();
            ending.currentTime = 0;
        selectMaze();
        holes = [];
        walls = [];
        exits = [];

        console.log("Buracos recriados:" + holes);
        console.log("Paredes recriadas:" + walls);
        console.log("Saídas recriadas:" + exits);
        console.log("Jogador realocado!" + player.x, player.y);
        cnv.style.display = "block";
        createBlocks();
    }, "1000");
       }
        //Movimentar personagem
       if(mvLeft && !mvRight && gameStart > 0){
        player.x -= player.speed;
        player.srcY = player.height * 1;
       }
       else if(mvRight && !mvLeft && gameStart > 0){
        player.x += player.speed;
        player.srcY = player.height * 2;
       }
       if(mvUp && !mvDown && gameStart > 0){
        player.y -= player.speed;
        player.srcY = player.height * 3;
       }
       else if(mvDown && !mvUp && gameStart > 0){
        player.y += player.speed;
        player.srcY = player.height * 0;
       }
       if(mvLeft || mvRight || mvUp || mvDown){
        player.countAnim++;

        if(player.countAnim >= 30){
            player.countAnim = 0;
        }
        player.srcX = Math.floor(player.countAnim/10) * player.width;
       }else{
        player.srcX = 0;
        player.countAnim = 0;
       }
       for(var i in walls){
        var wall = walls[i];
        blockRectangle(player, wall);
       }
       for(var i in holes){
        var hole = holes[i];
        blockRectangle(player, hole);
       }
       for(var i in exits){
        var exit = exits[i];
        gameEnd(player, exit);
       }

       //Mover câmera 
       if(player.x < cam.innerLeftBoundary()){
        cam.x = player.x - (cam.width * 0.25);
       }
       if(player.y < cam.innerUpBoundary()){
        cam.y = player.y - (cam.height * 0.25);
       }
       if(player.x + player.width > cam.innerRightBoundary()){
        cam.x = player.x + player.width - (cam.width * 0.75);
       }
       if(player.y + player.height > cam.innerDownBoundary()){
        cam.y = player.y + player.height - (cam.height * 0.75);
       }

       cam.x = Math.max(0, Math.min(T_WIDTH - cam.width, cam.x));
       cam.y = Math.max(0, Math.min(T_HEIGHT - cam.height, cam.y));
    }

    function render(){
            ctx.clearRect(0,0,WIDTH,HEIGHT);
            ctx.save();
            ctx.translate(-cam.x, -cam.y);
            for (var row in maze){
                //Desenha o Labirinto
                for (var col in maze[row]){
                    var tile = maze[row][col];
                    var x = col * tileSize;
                    var y = row * tileSize;
                    if(tile == 0){
                    ctx.drawImage(imgFloor, 0, 0, tileSize, tileSize,
                        x,y, tileSize, tileSize);
                    }
                    if(tile == 1){
                        ctx.drawImage(imgWall, 0, 0, tileSize, tileSize,
                            x,y, tileSize, tileSize);
                        }
                    if(tile == 3){
                        ctx.drawImage(imgExit, 0, 0, tileSize, tileSize,
                            x,y, tileSize, tileSize);
                        }
                    
                    
                }
            }
            
            ctx.drawImage(
                imgPlayer,
                player.srcX, player.srcY, player.width, player.height,
                player.x, player.y, player.width, player.height
            );
            ctx.restore();
    }

    function gameCredits(){
        console.log("FIM DE JOGO!");
        console.log("Posição final:" + player.x, player.y);
        gameOver = 1;
        cnv.style.display="none";
        var win1 = new Image();
        win1.src = "img/win(25).png";
        var win2 = new Image();
        win2.src = "img/win(50).png";
        var win3 = new Image();
        win3.src = "img/win(75).png";
        var win4 = new Image();
        win4.src = "img/win.png";
        var winTxt1 = new Image();
        winTxt1.src = "img/winTxt(25).png";
        var winTxt2 = new Image();
        winTxt2.src = "img/winTxt(50).png";
        var winTxt3 = new Image();
        winTxt3.src = "img/winTxt(75).png";
        var winTxt4 = new Image();
        winTxt4.src = "img/winTxt.png";
        var pressContinue = new Image();
        pressContinue.src = "img/continue.png";
        lvlSong.pause();
        lvlSong.currentTime = 0; 
        lvlSongB.pause();
        lvlSongB.currentTime = 0;
        ending.play();
        ending.loop = true;
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
            document.getElementById("gameEnd").appendChild(win1);      
            }, "200");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
            document.getElementById('gameEnd').innerHTML = '';
            document.getElementById("gameEnd").appendChild(win2);      
            }, "400");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
            document.getElementById('gameEnd').innerHTML = '';
            document.getElementById("gameEnd").appendChild(win3);      
            }, "600");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
            document.getElementById('gameEnd').innerHTML = '';
            document.getElementById("gameEnd").appendChild(win4);      
            }, "800");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
            document.getElementById("messageEnd").appendChild(winTxt1);      
            }, "1000");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
            document.getElementById('messageEnd').innerHTML = '';
            document.getElementById("messageEnd").appendChild(winTxt2);      
            }, "1200");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
            document.getElementById('messageEnd').innerHTML = '';
            document.getElementById("messageEnd").appendChild(winTxt3);      
            }, "1400");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
                document.getElementById('messageEnd').innerHTML = '';
                document.getElementById("messageEnd").appendChild(winTxt4);      
            }, "1600");
        setTimeout(() => {
            if(gameOver == 0){
                return; 
               }
                document.getElementById("continue").appendChild(pressContinue);      
        }, "1800");
 
    }
 
    function loop(){
        update();
        render();
        requestAnimationFrame(loop, cnv);
    }
    requestAnimationFrame(loop, cnv);
}());